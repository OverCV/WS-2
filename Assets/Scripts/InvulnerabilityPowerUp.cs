using UnityEngine;

public class InvulnerabilityPowerUp : MonoBehaviour
{
    [Header("PowerUp Settings")]
    [Tooltip("Whether the powerup can be collected multiple times")]
    public bool isReusable = false;
    
    [Header("Visual Effects")]
    public float rotationSpeed = 50f; // Rotation speed for visual appeal
    public float floatAmplitude = 0.2f; // How much the item floats up and down
    public float floatSpeed = 2f; // Speed of the floating animation
    
    private Vector3 startPosition;
    private bool hasBeenCollected = false;
    
    void Start()
    {
        // Store the starting position for floating animation
        startPosition = transform.position;
        
        // Validate that this object has a Collider set as Trigger
        Collider col = GetComponent<Collider>();
        if (col == null)
        {
            Debug.LogError("InvulnerabilityPowerUp: No Collider found on " + gameObject.name);
        }
        else if (!col.isTrigger)
        {
            Debug.LogError("InvulnerabilityPowerUp: Collider on " + gameObject.name + " is not set as Trigger");
        }
        
        Debug.Log("Copa de invulnerabilidad lista para ser recogida en posición: " + transform.position);
    }
    
    void Update()
    {
        // Create floating and rotating animation for visual appeal
        AnimatePowerUp();
    }
    
    /// <summary>
    /// Creates a floating and rotating animation for the powerup
    /// </summary>
    private void AnimatePowerUp()
    {
        // Rotate the powerup
        transform.Rotate(Vector3.up * rotationSpeed * Time.deltaTime);
        
        // Float up and down
        float newY = startPosition.y + Mathf.Sin(Time.time * floatSpeed) * floatAmplitude;
        transform.position = new Vector3(startPosition.x, newY, startPosition.z);
    }
    
    /// <summary>
    /// Detects when the player touches the powerup
    /// </summary>
    /// <param name="other">The collider that entered the trigger</param>
    void OnTriggerEnter(Collider other)
    {
        // Check if the object that touched us has the "Player" tag
        if (other.CompareTag("Player"))
        {
            Debug.Log("¡Jugador tocó la copa de invulnerabilidad!");
            
            // Try to collect the powerup
            CollectPowerUp(other.gameObject);
        }
    }
    
    /// <summary>
    /// Handles the powerup collection logic
    /// </summary>
    /// <param name="player">The player GameObject that collected the powerup</param>
    private void CollectPowerUp(GameObject player)
    {
        // Check if already collected and not reusable
        if (hasBeenCollected && !isReusable)
        {
            Debug.Log("Copa ya fue recogida y no es reutilizable");
            return;
        }
        
        // Find the InvulnerabilitySystem on the player
        InvulnerabilitySystem invulnerabilitySystem = player.GetComponent<InvulnerabilitySystem>();
        
        if (invulnerabilitySystem == null)
        {
            Debug.LogError("InvulnerabilityPowerUp: No se encontró InvulnerabilitySystem en el jugador " + player.name);
            return;
        }
        
        // Activate invulnerability
        invulnerabilitySystem.ActivateInvulnerability();
        Debug.Log("¡Invulnerabilidad activada por la copa!");
        
        // Mark as collected
        hasBeenCollected = true;
        
        // Handle powerup after collection
        OnPowerUpCollected();
    }
    
    /// <summary>
    /// Handles what happens after the powerup is collected
    /// </summary>
    private void OnPowerUpCollected()
    {
        if (isReusable)
        {
            // If reusable, temporarily disable and re-enable after some time
            StartCoroutine(RespawnPowerUp());
        }
        else
        {
            // If not reusable, disable the GameObject
            Debug.Log("Copa recogida - Desactivando GameObject");
            gameObject.SetActive(false);
        }
    }
    
    /// <summary>
    /// Respawns the powerup after a delay (if reusable)
    /// </summary>
    private System.Collections.IEnumerator RespawnPowerUp()
    {
        // Hide the powerup
        GetComponent<Renderer>().enabled = false;
        GetComponent<Collider>().enabled = false;
        
        Debug.Log("Copa entrando en cooldown para respawn...");
        
        // Wait for respawn time
        yield return new WaitForSeconds(30f); // 30 seconds cooldown
        
        // Reset and show the powerup
        hasBeenCollected = false;
        GetComponent<Renderer>().enabled = true;
        GetComponent<Collider>().enabled = true;
        
        Debug.Log("¡Copa respawneada y lista para ser recogida!");
    }
    
    /// <summary>
    /// For debugging - draws a sphere gizmo to show trigger area
    /// </summary>
    void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.cyan;
        SphereCollider sphereCol = GetComponent<SphereCollider>();
        if (sphereCol != null)
        {
            Gizmos.DrawWireSphere(transform.position, sphereCol.radius * transform.localScale.x);
        }
    }
    
    /// <summary>
    /// Reset the powerup when re-enabled (useful for testing)
    /// </summary>
    void OnEnable()
    {
        if (Application.isPlaying)
        {
            hasBeenCollected = false;
        }
    }
}